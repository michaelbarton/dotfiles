[user]
  email = mail@michaelbarton.me.uk
  name = Michael Barton
  signingkey = 6EB517B0
[color]
  branch = auto
  diff = auto
  status = auto
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[alias]
  # Status and info
  s    = status -sb                                                                 # Short status with branch info
  l    = log --decorate --graph --pretty=format:\"%Cred%h%Creset - %s %Cgreen(%cr)%Creset\" --abbrev-commit --date=relative  # Compact log with graph
  name = !git for-each-ref --format='%(refname:short)' `git symbolic-ref HEAD`     # Get current branch name
  aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'      # List all aliases
  which = branch -a --contains                                                      # Show which branches contain a commit
  last-commit = !git --no-pager log --max-count 1 --remotes --pretty=format:"%H%n" # Get last commit hash
  last-branch = for-each-ref --count 1 --sort=-committerdate refs/remotes/ --format='%(refname:short)' # Most recent branch

  # Committing changes
  c    = commit                   # Commit changes
  ca   = commit -a                # Commit all changes
  cc   = commit --amend           # Amend last commit

  # Staging
  a    = add                      # Add files
  ap   = add --patch              # Interactive add
  rm   = rm                       # Remove files

  # Viewing changes
  d    = diff                     # Show changes
  ds   = diff --staged            # Show staged changes
  dt   = diff --word-diff         # Show word-level diff
  lst  = diff HEAD^..HEAD         # Show changes in the last commit

  # Branch operations
  sw   = checkout                 # Switch branches
  swb  = checkout -b              # Create and switch to a branch
  pd   = checkout -                # Jump to previous branch
  b    = branch                   # List branches
  bd   = branch -d                # Delete branch

  # Advanced operations
  r    = rebase                   # Rebase current branch
  ri   = rebase --interactive     # Interactive rebase
  m    = merge --no-ff            # Merge with commit

  # Remote operations
  p    = push                     # Push to remote
  pm   = push --mirror            # Mirror push
  pt   = push --tags              # Push tags
  
  # Branch promotion/demotion
  # promote: Push the current branch to origin and set up tracking
  promote = !BRCH=$(git name) && git push origin $BRCH && git branch --set-upstream-to=origin/$BRCH
  
  # demote: Delete the remote copy of the current branch
  demote = !BRCH=$(git name) && git push origin :$BRCH

  # Tagging
  t    = tag -u mail@michaelbarton.me.uk -s  # Create signed tag

  # GitHub specific
  hub  = !sh -c 'hub clone -p $1 $2' -        # Clone from GitHub with hub
  me = !gitme                                  # Custom user command

  # Workflow helpers
  undo = reset HEAD~1                          # Undo last commit
  
  # Create a hotfix branch, commit changes, merge back to original branch, and clean up
  hotfix = !git checkout -b hotfix && git commit -a --sign && git checkout - && git merge --no-ff --gpg-sign - && git branch -d hotfix

  # Difftastic integration
  dft = difftool                              # Shorthand for difftool

[core]
  excludesfile = /Users/mike/.gitignore
  autocrlf = input
  whitespace = trailing-space,space-before-tab
[branch]
  autosetupmerge = true
[rerere]
  enabled = true
  autoupdate = true
[github]
  user = michaelbarton
[push]
	default = matching
[ghi]
	token = !security find-internet-password -a michaelbarton -s github.com -l 'ghi token' -w

[diff]
	tool = difftastic
	renames = copies
	external = difft

[difftool]
	prompt = false

[difftool "difftastic"]
	cmd = difft --inline "$LOCAL" "$REMOTE"

# Use a pager for large output, just like other git commands.
[pager]
	difftool = true

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
